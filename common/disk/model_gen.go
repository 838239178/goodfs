package disk

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *DevID) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Major":
			z.Major, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Major")
				return
			}
		case "Minor":
			z.Minor, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Minor")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z DevID) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Major"
	err = en.Append(0x82, 0xa5, 0x4d, 0x61, 0x6a, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Major)
	if err != nil {
		err = msgp.WrapError(err, "Major")
		return
	}
	// write "Minor"
	err = en.Append(0xa5, 0x4d, 0x69, 0x6e, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Minor)
	if err != nil {
		err = msgp.WrapError(err, "Minor")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z DevID) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Major"
	o = append(o, 0x82, 0xa5, 0x4d, 0x61, 0x6a, 0x6f, 0x72)
	o = msgp.AppendUint32(o, z.Major)
	// string "Minor"
	o = append(o, 0xa5, 0x4d, 0x69, 0x6e, 0x6f, 0x72)
	o = msgp.AppendUint32(o, z.Minor)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DevID) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Major":
			z.Major, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Major")
				return
			}
		case "Minor":
			z.Minor, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Minor")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z DevID) Msgsize() (s int) {
	s = 1 + 6 + msgp.Uint32Size + 6 + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *IOStats) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ReadIOs":
			z.ReadIOs, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ReadIOs")
				return
			}
		case "ReadMerges":
			z.ReadMerges, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ReadMerges")
				return
			}
		case "ReadSectors":
			z.ReadSectors, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ReadSectors")
				return
			}
		case "ReadTicks":
			z.ReadTicks, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ReadTicks")
				return
			}
		case "WriteIOs":
			z.WriteIOs, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "WriteIOs")
				return
			}
		case "WriteMerges":
			z.WriteMerges, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "WriteMerges")
				return
			}
		case "WriteSectors":
			z.WriteSectors, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "WriteSectors")
				return
			}
		case "WriteTicks":
			z.WriteTicks, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "WriteTicks")
				return
			}
		case "CurrentIOs":
			z.CurrentIOs, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "CurrentIOs")
				return
			}
		case "TotalTicks":
			z.TotalTicks, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "TotalTicks")
				return
			}
		case "ReqTicks":
			z.ReqTicks, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ReqTicks")
				return
			}
		case "DiscardIOs":
			z.DiscardIOs, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "DiscardIOs")
				return
			}
		case "DiscardMerges":
			z.DiscardMerges, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "DiscardMerges")
				return
			}
		case "DiscardSectors":
			z.DiscardSectors, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "DiscardSectors")
				return
			}
		case "DiscardTicks":
			z.DiscardTicks, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "DiscardTicks")
				return
			}
		case "FlushIOs":
			z.FlushIOs, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "FlushIOs")
				return
			}
		case "FlushTicks":
			z.FlushTicks, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "FlushTicks")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *IOStats) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 17
	// write "ReadIOs"
	err = en.Append(0xde, 0x0, 0x11, 0xa7, 0x52, 0x65, 0x61, 0x64, 0x49, 0x4f, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ReadIOs)
	if err != nil {
		err = msgp.WrapError(err, "ReadIOs")
		return
	}
	// write "ReadMerges"
	err = en.Append(0xaa, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ReadMerges)
	if err != nil {
		err = msgp.WrapError(err, "ReadMerges")
		return
	}
	// write "ReadSectors"
	err = en.Append(0xab, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ReadSectors)
	if err != nil {
		err = msgp.WrapError(err, "ReadSectors")
		return
	}
	// write "ReadTicks"
	err = en.Append(0xa9, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ReadTicks)
	if err != nil {
		err = msgp.WrapError(err, "ReadTicks")
		return
	}
	// write "WriteIOs"
	err = en.Append(0xa8, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x4f, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.WriteIOs)
	if err != nil {
		err = msgp.WrapError(err, "WriteIOs")
		return
	}
	// write "WriteMerges"
	err = en.Append(0xab, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.WriteMerges)
	if err != nil {
		err = msgp.WrapError(err, "WriteMerges")
		return
	}
	// write "WriteSectors"
	err = en.Append(0xac, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.WriteSectors)
	if err != nil {
		err = msgp.WrapError(err, "WriteSectors")
		return
	}
	// write "WriteTicks"
	err = en.Append(0xaa, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.WriteTicks)
	if err != nil {
		err = msgp.WrapError(err, "WriteTicks")
		return
	}
	// write "CurrentIOs"
	err = en.Append(0xaa, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x4f, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.CurrentIOs)
	if err != nil {
		err = msgp.WrapError(err, "CurrentIOs")
		return
	}
	// write "TotalTicks"
	err = en.Append(0xaa, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.TotalTicks)
	if err != nil {
		err = msgp.WrapError(err, "TotalTicks")
		return
	}
	// write "ReqTicks"
	err = en.Append(0xa8, 0x52, 0x65, 0x71, 0x54, 0x69, 0x63, 0x6b, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ReqTicks)
	if err != nil {
		err = msgp.WrapError(err, "ReqTicks")
		return
	}
	// write "DiscardIOs"
	err = en.Append(0xaa, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x49, 0x4f, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.DiscardIOs)
	if err != nil {
		err = msgp.WrapError(err, "DiscardIOs")
		return
	}
	// write "DiscardMerges"
	err = en.Append(0xad, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.DiscardMerges)
	if err != nil {
		err = msgp.WrapError(err, "DiscardMerges")
		return
	}
	// write "DiscardSectors"
	err = en.Append(0xae, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.DiscardSectors)
	if err != nil {
		err = msgp.WrapError(err, "DiscardSectors")
		return
	}
	// write "DiscardTicks"
	err = en.Append(0xac, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.DiscardTicks)
	if err != nil {
		err = msgp.WrapError(err, "DiscardTicks")
		return
	}
	// write "FlushIOs"
	err = en.Append(0xa8, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49, 0x4f, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.FlushIOs)
	if err != nil {
		err = msgp.WrapError(err, "FlushIOs")
		return
	}
	// write "FlushTicks"
	err = en.Append(0xaa, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.FlushTicks)
	if err != nil {
		err = msgp.WrapError(err, "FlushTicks")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *IOStats) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 17
	// string "ReadIOs"
	o = append(o, 0xde, 0x0, 0x11, 0xa7, 0x52, 0x65, 0x61, 0x64, 0x49, 0x4f, 0x73)
	o = msgp.AppendUint64(o, z.ReadIOs)
	// string "ReadMerges"
	o = append(o, 0xaa, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x73)
	o = msgp.AppendUint64(o, z.ReadMerges)
	// string "ReadSectors"
	o = append(o, 0xab, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73)
	o = msgp.AppendUint64(o, z.ReadSectors)
	// string "ReadTicks"
	o = append(o, 0xa9, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x73)
	o = msgp.AppendUint64(o, z.ReadTicks)
	// string "WriteIOs"
	o = append(o, 0xa8, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x4f, 0x73)
	o = msgp.AppendUint64(o, z.WriteIOs)
	// string "WriteMerges"
	o = append(o, 0xab, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x73)
	o = msgp.AppendUint64(o, z.WriteMerges)
	// string "WriteSectors"
	o = append(o, 0xac, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73)
	o = msgp.AppendUint64(o, z.WriteSectors)
	// string "WriteTicks"
	o = append(o, 0xaa, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x73)
	o = msgp.AppendUint64(o, z.WriteTicks)
	// string "CurrentIOs"
	o = append(o, 0xaa, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x4f, 0x73)
	o = msgp.AppendUint64(o, z.CurrentIOs)
	// string "TotalTicks"
	o = append(o, 0xaa, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x73)
	o = msgp.AppendUint64(o, z.TotalTicks)
	// string "ReqTicks"
	o = append(o, 0xa8, 0x52, 0x65, 0x71, 0x54, 0x69, 0x63, 0x6b, 0x73)
	o = msgp.AppendUint64(o, z.ReqTicks)
	// string "DiscardIOs"
	o = append(o, 0xaa, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x49, 0x4f, 0x73)
	o = msgp.AppendUint64(o, z.DiscardIOs)
	// string "DiscardMerges"
	o = append(o, 0xad, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x73)
	o = msgp.AppendUint64(o, z.DiscardMerges)
	// string "DiscardSectors"
	o = append(o, 0xae, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73)
	o = msgp.AppendUint64(o, z.DiscardSectors)
	// string "DiscardTicks"
	o = append(o, 0xac, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x73)
	o = msgp.AppendUint64(o, z.DiscardTicks)
	// string "FlushIOs"
	o = append(o, 0xa8, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49, 0x4f, 0x73)
	o = msgp.AppendUint64(o, z.FlushIOs)
	// string "FlushTicks"
	o = append(o, 0xaa, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x73)
	o = msgp.AppendUint64(o, z.FlushTicks)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *IOStats) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ReadIOs":
			z.ReadIOs, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReadIOs")
				return
			}
		case "ReadMerges":
			z.ReadMerges, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReadMerges")
				return
			}
		case "ReadSectors":
			z.ReadSectors, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReadSectors")
				return
			}
		case "ReadTicks":
			z.ReadTicks, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReadTicks")
				return
			}
		case "WriteIOs":
			z.WriteIOs, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WriteIOs")
				return
			}
		case "WriteMerges":
			z.WriteMerges, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WriteMerges")
				return
			}
		case "WriteSectors":
			z.WriteSectors, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WriteSectors")
				return
			}
		case "WriteTicks":
			z.WriteTicks, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WriteTicks")
				return
			}
		case "CurrentIOs":
			z.CurrentIOs, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CurrentIOs")
				return
			}
		case "TotalTicks":
			z.TotalTicks, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalTicks")
				return
			}
		case "ReqTicks":
			z.ReqTicks, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqTicks")
				return
			}
		case "DiscardIOs":
			z.DiscardIOs, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DiscardIOs")
				return
			}
		case "DiscardMerges":
			z.DiscardMerges, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DiscardMerges")
				return
			}
		case "DiscardSectors":
			z.DiscardSectors, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DiscardSectors")
				return
			}
		case "DiscardTicks":
			z.DiscardTicks, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DiscardTicks")
				return
			}
		case "FlushIOs":
			z.FlushIOs, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FlushIOs")
				return
			}
		case "FlushTicks":
			z.FlushTicks, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FlushTicks")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *IOStats) Msgsize() (s int) {
	s = 3 + 8 + msgp.Uint64Size + 11 + msgp.Uint64Size + 12 + msgp.Uint64Size + 10 + msgp.Uint64Size + 9 + msgp.Uint64Size + 12 + msgp.Uint64Size + 13 + msgp.Uint64Size + 11 + msgp.Uint64Size + 11 + msgp.Uint64Size + 11 + msgp.Uint64Size + 9 + msgp.Uint64Size + 11 + msgp.Uint64Size + 14 + msgp.Uint64Size + 15 + msgp.Uint64Size + 13 + msgp.Uint64Size + 9 + msgp.Uint64Size + 11 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Info) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "total":
			err = z.Total.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Total")
				return
			}
		case "free":
			err = z.Free.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Free")
				return
			}
		case "used":
			err = z.Used.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Used")
				return
			}
		case "files":
			z.Files, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
		case "f_free":
			z.Ffree, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Ffree")
				return
			}
		case "fs_type":
			z.FSType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FSType")
				return
			}
		case "major":
			z.Major, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Major")
				return
			}
		case "minor":
			z.Minor, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Minor")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Info) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "total"
	err = en.Append(0x88, 0xa5, 0x74, 0x6f, 0x74, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = z.Total.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Total")
		return
	}
	// write "free"
	err = en.Append(0xa4, 0x66, 0x72, 0x65, 0x65)
	if err != nil {
		return
	}
	err = z.Free.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Free")
		return
	}
	// write "used"
	err = en.Append(0xa4, 0x75, 0x73, 0x65, 0x64)
	if err != nil {
		return
	}
	err = z.Used.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Used")
		return
	}
	// write "files"
	err = en.Append(0xa5, 0x66, 0x69, 0x6c, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Files)
	if err != nil {
		err = msgp.WrapError(err, "Files")
		return
	}
	// write "f_free"
	err = en.Append(0xa6, 0x66, 0x5f, 0x66, 0x72, 0x65, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Ffree)
	if err != nil {
		err = msgp.WrapError(err, "Ffree")
		return
	}
	// write "fs_type"
	err = en.Append(0xa7, 0x66, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.FSType)
	if err != nil {
		err = msgp.WrapError(err, "FSType")
		return
	}
	// write "major"
	err = en.Append(0xa5, 0x6d, 0x61, 0x6a, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Major)
	if err != nil {
		err = msgp.WrapError(err, "Major")
		return
	}
	// write "minor"
	err = en.Append(0xa5, 0x6d, 0x69, 0x6e, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Minor)
	if err != nil {
		err = msgp.WrapError(err, "Minor")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Info) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "total"
	o = append(o, 0x88, 0xa5, 0x74, 0x6f, 0x74, 0x61, 0x6c)
	o, err = z.Total.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Total")
		return
	}
	// string "free"
	o = append(o, 0xa4, 0x66, 0x72, 0x65, 0x65)
	o, err = z.Free.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Free")
		return
	}
	// string "used"
	o = append(o, 0xa4, 0x75, 0x73, 0x65, 0x64)
	o, err = z.Used.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Used")
		return
	}
	// string "files"
	o = append(o, 0xa5, 0x66, 0x69, 0x6c, 0x65, 0x73)
	o = msgp.AppendUint64(o, z.Files)
	// string "f_free"
	o = append(o, 0xa6, 0x66, 0x5f, 0x66, 0x72, 0x65, 0x65)
	o = msgp.AppendUint64(o, z.Ffree)
	// string "fs_type"
	o = append(o, 0xa7, 0x66, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.FSType)
	// string "major"
	o = append(o, 0xa5, 0x6d, 0x61, 0x6a, 0x6f, 0x72)
	o = msgp.AppendUint32(o, z.Major)
	// string "minor"
	o = append(o, 0xa5, 0x6d, 0x69, 0x6e, 0x6f, 0x72)
	o = msgp.AppendUint32(o, z.Minor)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Info) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "total":
			bts, err = z.Total.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Total")
				return
			}
		case "free":
			bts, err = z.Free.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Free")
				return
			}
		case "used":
			bts, err = z.Used.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Used")
				return
			}
		case "files":
			z.Files, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
		case "f_free":
			z.Ffree, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ffree")
				return
			}
		case "fs_type":
			z.FSType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FSType")
				return
			}
		case "major":
			z.Major, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Major")
				return
			}
		case "minor":
			z.Minor, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Minor")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Info) Msgsize() (s int) {
	s = 1 + 6 + z.Total.Msgsize() + 5 + z.Free.Msgsize() + 5 + z.Used.Msgsize() + 6 + msgp.Uint64Size + 7 + msgp.Uint64Size + 8 + msgp.StringPrefixSize + len(z.FSType) + 6 + msgp.Uint32Size + 6 + msgp.Uint32Size
	return
}
