// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: hashslot.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HashSlotClient is the client API for HashSlot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashSlotClient interface {
	PrepareMigration(ctx context.Context, in *PrepareReq, opts ...grpc.CallOption) (*Response, error)
	StartMigration(ctx context.Context, in *MigrationReq, opts ...grpc.CallOption) (*Response, error)
	StreamingReceive(ctx context.Context, opts ...grpc.CallOption) (HashSlot_StreamingReceiveClient, error)
	GetCurrentSlots(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*Response, error)
}

type hashSlotClient struct {
	cc grpc.ClientConnInterface
}

func NewHashSlotClient(cc grpc.ClientConnInterface) HashSlotClient {
	return &hashSlotClient{cc}
}

func (c *hashSlotClient) PrepareMigration(ctx context.Context, in *PrepareReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.HashSlot/PrepareMigration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashSlotClient) StartMigration(ctx context.Context, in *MigrationReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.HashSlot/StartMigration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashSlotClient) StreamingReceive(ctx context.Context, opts ...grpc.CallOption) (HashSlot_StreamingReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &HashSlot_ServiceDesc.Streams[0], "/proto.HashSlot/StreamingReceive", opts...)
	if err != nil {
		return nil, err
	}
	x := &hashSlotStreamingReceiveClient{stream}
	return x, nil
}

type HashSlot_StreamingReceiveClient interface {
	Send(*MigrationItem) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type hashSlotStreamingReceiveClient struct {
	grpc.ClientStream
}

func (x *hashSlotStreamingReceiveClient) Send(m *MigrationItem) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hashSlotStreamingReceiveClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hashSlotClient) GetCurrentSlots(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.HashSlot/GetCurrentSlots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashSlotServer is the server API for HashSlot service.
// All implementations must embed UnimplementedHashSlotServer
// for forward compatibility
type HashSlotServer interface {
	PrepareMigration(context.Context, *PrepareReq) (*Response, error)
	StartMigration(context.Context, *MigrationReq) (*Response, error)
	StreamingReceive(HashSlot_StreamingReceiveServer) error
	GetCurrentSlots(context.Context, *EmptyReq) (*Response, error)
	mustEmbedUnimplementedHashSlotServer()
}

// UnimplementedHashSlotServer must be embedded to have forward compatible implementations.
type UnimplementedHashSlotServer struct {
}

func (UnimplementedHashSlotServer) PrepareMigration(context.Context, *PrepareReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareMigration not implemented")
}
func (UnimplementedHashSlotServer) StartMigration(context.Context, *MigrationReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMigration not implemented")
}
func (UnimplementedHashSlotServer) StreamingReceive(HashSlot_StreamingReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingReceive not implemented")
}
func (UnimplementedHashSlotServer) GetCurrentSlots(context.Context, *EmptyReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSlots not implemented")
}
func (UnimplementedHashSlotServer) mustEmbedUnimplementedHashSlotServer() {}

// UnsafeHashSlotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashSlotServer will
// result in compilation errors.
type UnsafeHashSlotServer interface {
	mustEmbedUnimplementedHashSlotServer()
}

func RegisterHashSlotServer(s grpc.ServiceRegistrar, srv HashSlotServer) {
	s.RegisterService(&HashSlot_ServiceDesc, srv)
}

func _HashSlot_PrepareMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashSlotServer).PrepareMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HashSlot/PrepareMigration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashSlotServer).PrepareMigration(ctx, req.(*PrepareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashSlot_StartMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashSlotServer).StartMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HashSlot/StartMigration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashSlotServer).StartMigration(ctx, req.(*MigrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashSlot_StreamingReceive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HashSlotServer).StreamingReceive(&hashSlotStreamingReceiveServer{stream})
}

type HashSlot_StreamingReceiveServer interface {
	Send(*Response) error
	Recv() (*MigrationItem, error)
	grpc.ServerStream
}

type hashSlotStreamingReceiveServer struct {
	grpc.ServerStream
}

func (x *hashSlotStreamingReceiveServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hashSlotStreamingReceiveServer) Recv() (*MigrationItem, error) {
	m := new(MigrationItem)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HashSlot_GetCurrentSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashSlotServer).GetCurrentSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HashSlot/GetCurrentSlots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashSlotServer).GetCurrentSlots(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HashSlot_ServiceDesc is the grpc.ServiceDesc for HashSlot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashSlot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HashSlot",
	HandlerType: (*HashSlotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareMigration",
			Handler:    _HashSlot_PrepareMigration_Handler,
		},
		{
			MethodName: "StartMigration",
			Handler:    _HashSlot_StartMigration_Handler,
		},
		{
			MethodName: "GetCurrentSlots",
			Handler:    _HashSlot_GetCurrentSlots_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingReceive",
			Handler:       _HashSlot_StreamingReceive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hashslot.proto",
}
