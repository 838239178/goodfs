package cpu

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Stat) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "used_percent":
			z.UsedPercent, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "UsedPercent")
				return
			}
		case "logical_count":
			z.LogicalCount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "LogicalCount")
				return
			}
		case "physical_count":
			z.PhysicalCount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "PhysicalCount")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Stat) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "used_percent"
	err = en.Append(0x83, 0xac, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.UsedPercent)
	if err != nil {
		err = msgp.WrapError(err, "UsedPercent")
		return
	}
	// write "logical_count"
	err = en.Append(0xad, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.LogicalCount)
	if err != nil {
		err = msgp.WrapError(err, "LogicalCount")
		return
	}
	// write "physical_count"
	err = en.Append(0xae, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.PhysicalCount)
	if err != nil {
		err = msgp.WrapError(err, "PhysicalCount")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Stat) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "used_percent"
	o = append(o, 0x83, 0xac, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74)
	o = msgp.AppendFloat64(o, z.UsedPercent)
	// string "logical_count"
	o = append(o, 0xad, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.LogicalCount)
	// string "physical_count"
	o = append(o, 0xae, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.PhysicalCount)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Stat) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "used_percent":
			z.UsedPercent, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UsedPercent")
				return
			}
		case "logical_count":
			z.LogicalCount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LogicalCount")
				return
			}
		case "physical_count":
			z.PhysicalCount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PhysicalCount")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Stat) Msgsize() (s int) {
	s = 1 + 13 + msgp.Float64Size + 14 + msgp.IntSize + 15 + msgp.IntSize
	return
}
