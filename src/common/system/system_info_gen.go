package system

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"common/system/cpu"
	"common/system/disk"
	"common/system/mem"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Info) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "DiskInfo":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "DiskInfo")
					return
				}
				z.DiskInfo = nil
			} else {
				if z.DiskInfo == nil {
					z.DiskInfo = new(disk.Info)
				}
				err = z.DiskInfo.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "DiskInfo")
					return
				}
			}
		case "MemStatus":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "MemStatus")
					return
				}
				z.MemStatus = nil
			} else {
				if z.MemStatus == nil {
					z.MemStatus = new(mem.Status)
				}
				err = z.MemStatus.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "MemStatus")
					return
				}
			}
		case "CpuStatus":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "CpuStatus")
					return
				}
				z.CpuStatus = nil
			} else {
				if z.CpuStatus == nil {
					z.CpuStatus = new(cpu.Stat)
				}
				err = z.CpuStatus.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "CpuStatus")
					return
				}
			}
		case "IoStatus":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "IoStatus")
					return
				}
				z.IoStatus = nil
			} else {
				if z.IoStatus == nil {
					z.IoStatus = new(disk.IOStats)
				}
				err = z.IoStatus.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "IoStatus")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Info) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "DiskInfo"
	err = en.Append(0x84, 0xa8, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f)
	if err != nil {
		return
	}
	if z.DiskInfo == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.DiskInfo.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "DiskInfo")
			return
		}
	}
	// write "MemStatus"
	err = en.Append(0xa9, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	if z.MemStatus == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.MemStatus.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "MemStatus")
			return
		}
	}
	// write "CpuStatus"
	err = en.Append(0xa9, 0x43, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	if z.CpuStatus == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.CpuStatus.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "CpuStatus")
			return
		}
	}
	// write "IoStatus"
	err = en.Append(0xa8, 0x49, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	if z.IoStatus == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.IoStatus.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "IoStatus")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Info) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "DiskInfo"
	o = append(o, 0x84, 0xa8, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f)
	if z.DiskInfo == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.DiskInfo.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "DiskInfo")
			return
		}
	}
	// string "MemStatus"
	o = append(o, 0xa9, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if z.MemStatus == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.MemStatus.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "MemStatus")
			return
		}
	}
	// string "CpuStatus"
	o = append(o, 0xa9, 0x43, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if z.CpuStatus == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.CpuStatus.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "CpuStatus")
			return
		}
	}
	// string "IoStatus"
	o = append(o, 0xa8, 0x49, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if z.IoStatus == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.IoStatus.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "IoStatus")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Info) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "DiskInfo":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.DiskInfo = nil
			} else {
				if z.DiskInfo == nil {
					z.DiskInfo = new(disk.Info)
				}
				bts, err = z.DiskInfo.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "DiskInfo")
					return
				}
			}
		case "MemStatus":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.MemStatus = nil
			} else {
				if z.MemStatus == nil {
					z.MemStatus = new(mem.Status)
				}
				bts, err = z.MemStatus.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "MemStatus")
					return
				}
			}
		case "CpuStatus":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.CpuStatus = nil
			} else {
				if z.CpuStatus == nil {
					z.CpuStatus = new(cpu.Stat)
				}
				bts, err = z.CpuStatus.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "CpuStatus")
					return
				}
			}
		case "IoStatus":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.IoStatus = nil
			} else {
				if z.IoStatus == nil {
					z.IoStatus = new(disk.IOStats)
				}
				bts, err = z.IoStatus.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "IoStatus")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Info) Msgsize() (s int) {
	s = 1 + 9
	if z.DiskInfo == nil {
		s += msgp.NilSize
	} else {
		s += z.DiskInfo.Msgsize()
	}
	s += 10
	if z.MemStatus == nil {
		s += msgp.NilSize
	} else {
		s += z.MemStatus.Msgsize()
	}
	s += 10
	if z.CpuStatus == nil {
		s += msgp.NilSize
	} else {
		s += z.CpuStatus.Msgsize()
	}
	s += 9
	if z.IoStatus == nil {
		s += msgp.NilSize
	} else {
		s += z.IoStatus.Msgsize()
	}
	return
}
