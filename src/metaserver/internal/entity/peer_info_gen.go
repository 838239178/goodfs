package entity

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PeerInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "location":
			z.Location, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Location")
				return
			}
		case "http_port":
			z.HttpPort, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "HttpPort")
				return
			}
		case "gprc_port":
			z.GrpcPort, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "GrpcPort")
				return
			}
		case "group_id":
			z.GroupID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "GroupID")
				return
			}
		case "ServerID":
			z.ServerID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ServerID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PeerInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "location"
	err = en.Append(0x85, 0xa8, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Location)
	if err != nil {
		err = msgp.WrapError(err, "Location")
		return
	}
	// write "http_port"
	err = en.Append(0xa9, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.HttpPort)
	if err != nil {
		err = msgp.WrapError(err, "HttpPort")
		return
	}
	// write "gprc_port"
	err = en.Append(0xa9, 0x67, 0x70, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.GrpcPort)
	if err != nil {
		err = msgp.WrapError(err, "GrpcPort")
		return
	}
	// write "group_id"
	err = en.Append(0xa8, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.GroupID)
	if err != nil {
		err = msgp.WrapError(err, "GroupID")
		return
	}
	// write "ServerID"
	err = en.Append(0xa8, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.ServerID)
	if err != nil {
		err = msgp.WrapError(err, "ServerID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PeerInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "location"
	o = append(o, 0x85, 0xa8, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Location)
	// string "http_port"
	o = append(o, 0xa9, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74)
	o = msgp.AppendString(o, z.HttpPort)
	// string "gprc_port"
	o = append(o, 0xa9, 0x67, 0x70, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74)
	o = msgp.AppendString(o, z.GrpcPort)
	// string "group_id"
	o = append(o, 0xa8, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64)
	o = msgp.AppendString(o, z.GroupID)
	// string "ServerID"
	o = append(o, 0xa8, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendString(o, z.ServerID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PeerInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "location":
			z.Location, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Location")
				return
			}
		case "http_port":
			z.HttpPort, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HttpPort")
				return
			}
		case "gprc_port":
			z.GrpcPort, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GrpcPort")
				return
			}
		case "group_id":
			z.GroupID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GroupID")
				return
			}
		case "ServerID":
			z.ServerID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PeerInfo) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.Location) + 10 + msgp.StringPrefixSize + len(z.HttpPort) + 10 + msgp.StringPrefixSize + len(z.GrpcPort) + 9 + msgp.StringPrefixSize + len(z.GroupID) + 9 + msgp.StringPrefixSize + len(z.ServerID)
	return
}
